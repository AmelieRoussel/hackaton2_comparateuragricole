{% extends 'base.html.twig' %}
{% form_theme formComment 'bootstrap_4_layout.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
          integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
          crossorigin=""/>
{% endblock %}

{% block body %}
        <h1 class="text-center my-5">La carte des agriculteurs du monde</h1>
        <hr>
    {{ form_start(formDepartment) }}
    {{ form_widget(formDepartment) }}
    <button>Search</button>
    {{ form_end(formDepartment) }}

    {{ form_start(formCity) }}
        {{ form_widget(formCity) }}
        <button>Search</button>
        {{ form_end(formCity) }}

        {{ form_start(formByProduct) }}
        {{ form_widget(formByProduct) }}
        <button>Rechercher</button>
        {{ form_end(formByProduct) }}

        <div id="position"></div>

        <div id="map" class="map"></div>

        <hr>

        <h2 class="text-center my-5">Ecrivez votre commentaire :</h2>

        {% if app.user %}
        <div class="container">
            <div class="text-dark mb-5">
                {{ form_start(formComment) }}
                <div class="my-3">
                    {{ form_label(formComment.commentText, 'Votre commentaire :') }}
                    {{ form_widget(formComment.commentText) }}
                </div>
                <div class="my-3">
                    {{ form_label(formComment.rate, 'Votre note :') }}
                    {{ form_widget(formComment.rate) }}
                </div>
                <button class="btn btn-primary mt-3">
                    {{ 'Sauvegarder'|trans }}</button>
                {{ form_end(formComment) }}
            </div>
            {% else %}
                <a href="{{ path('app_login') }}" class="btn btn-primary">Se connecter</a>
            {% endif %}
            <hr>
            <h2 class="text-center my-5"> Les commentaires :</h2>
            <div class="row d-flex justify-content-center my-5">
                {% for comment in comments %}
                    <div class="comment d-flex flex-column col-12 col-sm-5 col-lg-3 p-2 m-2">
                        <p class="mb-0">De :
                            <strong>{{ comment.author.firstname }} {{ comment.author.lastname }}</strong></p>
                        <p class="mb-0">Note :
                            {% for i in 1..comment.rate %}
                                <img src="{{ asset('build/images/star.svg') }}" class="stars-rate" alt="">
                            {% endfor %}
                        </p>
                        <p class="mb-0">Commentaire : {{ comment.commentText }}</p>
                    </div>
                {% endfor %}
            </div>
        </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
            integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
            crossorigin=""></script>
    <script> let map = L.map('map').setView([49.157376, 0.47716], 13);

        function initMap() {
            L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
                attribution: 'données © <a href="//osm.org/copyright">OpenStreetMap</a>/ODbL - rendu <a href="//openstreetmap.fr">OSM France</a>',
                minZoom: 6,
                maxZoom: 18
            }).addTo(map);
        }

        window.onload = function () {
            initMap();
        };

        let marker = L.marker([47.878264, 1.9258559])
            .addTo(map);
        marker.bindPopup("<p>Chez Jean michel </p>")</script>

    <script>
        function geolocation(position) {
            let infopos = "Position :\n";
            infopos += "Latitude : " + position.coords.latitude + "\n";
            infopos += "Longitude: " + position.coords.longitude + "\n";
            document.getElementById("position").innerHTML = infopos;

            let userIcon = L.icon({
                iconUrl: '{{ asset('build/images/marker/geolocation.png') }}',
                //shadowUrl: '{{ asset('build/images/marker/geolocation.png') }}',
                iconSize: [41, 41],
                //shadowSize:   [50, 64],
                iconAnchor: [20, 41],
                //shadowAnchor: [32, 64],
                popupAnchor: [0, -40]
            });
            let userGeolocation = L.marker([position.coords.latitude, position.coords.longitude], {icon: userIcon})
                .addTo(map);
            userGeolocation.bindPopup("<p>Vous êtes ici</p>");
        }

        if(navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(geolocation);
            map.locate({setView: true, maxZoom: 16});
        }

        let farmerIcon = L.icon({
            iconUrl: '{{ asset('build/images/marker/farmer.png') }}',
            //shadowUrl: '{{ asset('build/images/marker/farmer.png') }}',
            iconSize: [41, 41],
            //shadowSize:   [50, 64],
            iconAnchor: [20, 41],
            //shadowAnchor: [32, 64],
            popupAnchor: [0, -40]
        });

        let coordinates = [];
        let categories = [];
        let category = '';
        let cityFarmers = [];
        let farmerPerCity = 0;
        let categoryList = '';
        let cityName = '';
        {% for farmer in farmers %}
        cityFarmers = [];
        categories = [];
        categoryList = '';
        farmerPerCity = 0;
        cityName = '';
        coordinates = [{{ farmer.city.latitude }}, {{ farmer.city.longitude }}];
        if (typeof {{ farmer.city.slug }} == 'undefined') {
            let {{ farmer.city.slug }} = L.marker(coordinates, {icon: farmerIcon})
                .addTo(map);

            {% for city in cities %}
                {% if city.slug == farmer.city.slug %}
            cityName = "{{ city.city|title }}";
                    {% for farmer in city.farmers %}
                        farmerPerCity++
                        {% for transaction in farmer.transactions %}
                            if (categories.indexOf('{{ transaction.product.category.name }}') === -1)
                                categories.push("{{ transaction.product.category.name }}");
                        {% endfor %}
                    {% endfor %}
                {% endif %}
            {% endfor %}

            category = categories.join(', ');

            if (category !== '') {
                categoryList = "Céréales vendues : " + category;
            }

            {{ farmer.city.slug }}.bindPopup(
                "<p class=\"text-center\">" + cityName + "</p>" +
                     "<p>Nombre d'agriculteurs : " + farmerPerCity + "</p>" +
                    {# {% for city in cities %} city{{ city.zipcode }}sum {% endfor %} + "</p>" + #}
                "<p>" + categoryList + "</p>"
            );
        }
        {% endfor %}
    </script>
    <script>
        const Esri_WorldImagery = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
            attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
        });

        const OpenStreetMap_France = L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
            maxZoom: 20,
            attribution: '&copy; Openstreetmap France | &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        });

        const Stadia_Outdoors = L.tileLayer('https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png', {
            maxZoom: 20,
            attribution: '&copy; <a href="https://stadiamaps.com/">Stadia Maps</a>, &copy; <a href="https://openmaptiles.org/">OpenMapTiles</a> &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors'
        });

        const Stadia_AlidadeSmoothDark = L.tileLayer('https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png', {
            maxZoom: 20,
            attribution: '&copy; <a href="https://stadiamaps.com/">Stadia Maps</a>, &copy; <a href="https://openmaptiles.org/">OpenMapTiles</a> &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors'
        });

        let position1 = L.marker([47.878264, 2.9258559]);
        let position2 = L.marker([47.878264, 2.9558559]);
        let position3 = L.marker([47.878264, 2.7258559]);



        let basemaps = {
            "Standard": OpenStreetMap_France,
            "Stadia": Stadia_Outdoors,
            "Sombre": Stadia_AlidadeSmoothDark,
            "Satellite": Esri_WorldImagery,

        };

        let overlays = {
            "Layer1": position1,
            "Layer2": position2,
            "Layer3": position3,
        }

        L.control.layers(basemaps,overlays,{collapsed:false}).addTo(map);

        //position1.on("add",function(){
        //    position2.addTo(map);
        //});
    </script>
{% endblock %}
